<?xml version="1.0"?>
<ruleset name="Custom PHP Code Sniffer Ruleset">

    <exclude-pattern>vendor/*</exclude-pattern>
    <exclude-pattern>database/*</exclude-pattern>
    <exclude-pattern>_ide_helper*</exclude-pattern>
    <exclude-pattern>.phpstorm.meta.php</exclude-pattern>

    <arg name="tab-width" value="4"/>
    <!--<arg name="report" value="summary"/>-->
    <arg name="colors"/>
    <arg value="sp"/>

    <!-- PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags; it MUST NOT use the other tag variations. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
        <severity>0</severity>
    </rule>

    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- Class names MUST be declared in StudlyCaps. -->
    <rule ref="Squiz.Classes.ValidClassName"/>

    <!-- Class constants MUST be declared in all upper case with underscore separators. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Method names MUST be declared in camelCase(). -->
    <!-- checked in Methods/CamelCapsMethodNameSniff -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- The soft limit on line length MUST be 120 characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="140"/>
        </properties>
    </rule>

    <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>0</severity>
    </rule>

    <!-- There MUST NOT be more than one statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <rule ref="Generic.WhiteSpace.ScopeIndent.Incorrect">
        <type>warning</type>
    </rule>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace.Indent">
        <type>warning</type>
    </rule>
    <rule ref="Generic.WhiteSpace.ScopeIndent.IncorrectExact">
        <type>warning</type>
    </rule>
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace.Indent">
        <type>warning</type>
    </rule>

    <!-- PHP keywords MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <!-- The PHP constants true, false, and null MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

    <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
        <severity>0</severity>
    </rule>

    <!-- Method arguments with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
        <!-- Custom exclusions: -->
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterFunction"/>
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
    </rule>

    <!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.-->
    <!--Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PSR2.Methods.FunctionCallSignature.OpeningIndent">
        <severity>0</severity>
    </rule>

    <!-- The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    There MUST be one space between the closing parenthesis and the opening brace
    The structure body MUST be indented once
    The closing brace MUST be on the next line after the body -->
    <rule ref="Squiz.ControlStructures.ControlSignature">
        <!-- Custom exclusions: -->
        <exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace"/>
        <exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterKeyword"/>
    </rule>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose"/>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

    <!-- Closures MUST be declared with a space after the function keyword, and a space before and after the use keyword.
    The opening brace MUST go on the same line, and the closing brace MUST go on the next line following the body.
    There MUST NOT be a space after the opening parenthesis of the argument list or variable list, and there MUST NOT be a space before the closing parenthesis of the argument list or variable list.
    In the argument list and variable list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
    Closure arguments with default values MUST go at the end of the argument list.
    Argument lists and variable lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument or variable per line.
    When the ending list (whether or arguments or variables) is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->

    <!-- Include some specific sniffs -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax">
        <type>warning</type>
    </rule>

    <!-- allow empty catch statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
    </rule>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <rule ref="PEAR.ControlStructures.MultiLineCondition"/>
    <rule ref="PEAR.Formatting.MultiLineAssignment"/>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <rule ref="PSR2.Files.EndFileNewline">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.Files.ClosingTag"/>
    <rule ref="Zend.Debug.CodeAnalyzer"/>

    <!-- We don't want gsjlint throwing errors for things we already check -->
    <rule ref="Generic.Debug.ClosureLinter">
        <properties>
            <property name="errorCodes" type="array" value="0210"/>
            <property name="ignoreCodes" type="array" value="0001,0110,0240"/>
        </properties>
    </rule>
    <rule ref="Generic.Debug.ClosureLinter.ExternalToolError">
        <message>%2$s</message>
    </rule>

    <!-- use custom indent rules for arrays -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Generic.Arrays.ArrayIndent.CloseBraceIncorrect">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Arrays.ArrayIndent.KeyIncorrect">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">
        <severity>0</severity>
    </rule>

    <!-- Include some sniffs from all around the place -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

    <!--I wish...-->
    <!--<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>-->

    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.Functions.GlobalFunction"/>

</ruleset>